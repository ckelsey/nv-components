/**
* This is an autogenerated file created by the Stencil compiler.
* It contains typing information for all components that exist in this project.
*/
/* tslint:disable */

import './stencil.core';

import '@ionic/core';
import 'ionicons';
import {
  Event,
} from './stencil.core';


export namespace Components {

  interface MaterialIcon {
    'color': string;
    'getIcon': (key: string) => Promise<any>;
    'icons': () => Promise<{ [key: string]: string; }>;
    'size': string;
    'type': string;
  }
  interface MaterialIconAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'size'?: string;
    'type'?: string;
  }

  interface NvButton {
    'doBlur': () => Promise<void>;
    'doClick': () => Promise<void>;
    'doFocus': () => Promise<void>;
    'doMouseDown': () => Promise<void>;
    'doMouseEnter': () => Promise<void>;
    'doMouseLeave': () => Promise<void>;
    'doMouseUp': () => Promise<void>;
    'type': string | undefined;
  }
  interface NvButtonAttributes extends StencilHTMLAttributes {
    'onWhenblur'?: (event: CustomEvent) => void;
    'onWhenclick'?: (event: CustomEvent) => void;
    'onWhenfocus'?: (event: CustomEvent) => void;
    'onWhenmousedown'?: (event: CustomEvent) => void;
    'onWhenmouseenter'?: (event: CustomEvent) => void;
    'onWhenmouseleave'?: (event: CustomEvent) => void;
    'onWhenmouseup'?: (event: CustomEvent) => void;
    'type'?: string | undefined;
  }

  interface NvCheckboxArray {
    'disabled': boolean;
    'label': string;
    'parentDisabled': boolean;
    'selfUpdate': boolean;
    'values': any[] | string;
    'whenUpdate': Function;
  }
  interface NvCheckboxArrayAttributes extends StencilHTMLAttributes {
    'disabled'?: boolean;
    'label'?: string;
    'onWhenupdate'?: (event: CustomEvent) => void;
    'parentDisabled'?: boolean;
    'selfUpdate'?: boolean;
    'values'?: any[] | string;
    'whenUpdate'?: Function;
  }

  interface NvCheckbox {
    'disabled': boolean;
    'label': string;
    'parentDisabled': boolean;
    'selfUpdate': boolean;
    'toggle': () => Promise<boolean>;
    'value': boolean | string;
    'whenUpdate': Function;
  }
  interface NvCheckboxAttributes extends StencilHTMLAttributes {
    'disabled'?: boolean;
    'label'?: string;
    'onWhenupdate'?: (event: CustomEvent) => void;
    'parentDisabled'?: boolean;
    'selfUpdate'?: boolean;
    'value'?: boolean | string;
    'whenUpdate'?: Function;
  }

  interface NvImage {
    'cover': boolean;
    'placeholder': string;
    'url': string;
    'whenError': Function | undefined;
    'whenLoad': Function | undefined;
    'whenMeta': Function | undefined;
  }
  interface NvImageAttributes extends StencilHTMLAttributes {
    'cover'?: boolean;
    'onWhenerror'?: (event: CustomEvent) => void;
    'onWhenload'?: (event: CustomEvent) => void;
    'onWhenmeta'?: (event: CustomEvent) => void;
    'placeholder'?: string;
    'url'?: string;
    'whenError'?: Function | undefined;
    'whenLoad'?: Function | undefined;
    'whenMeta'?: Function | undefined;
  }

  interface NvInput {
    'assistiveText': string;
    'characterCount': boolean;
    'classes': string;
    'clear': boolean;
    'doBlur': () => Promise<void>;
    'doClick': () => Promise<void>;
    'doError': (message: string) => Promise<void>;
    'doFocus': () => Promise<void>;
    'doInput': (e?: Event) => Promise<boolean>;
    'error': boolean;
    'filterOptions': boolean;
    'helpText': string;
    'icon': string;
    'label': string;
    'max': number | undefined;
    'min': number | undefined;
    'multiline': boolean;
    'optionClicked': (index: number) => Promise<void>;
    'options': Array<string | number> | string | undefined;
    'required': boolean;
    'selfUpdate': boolean;
    'step': number | undefined;
    'type': string;
    'validator': Function | undefined;
    'value': string | number;
    'whenBlur': Function | undefined;
    'whenError': Function | undefined;
    'whenFocus': Function | undefined;
    'whenUpdate': Function | undefined;
  }
  interface NvInputAttributes extends StencilHTMLAttributes {
    'assistiveText'?: string;
    'characterCount'?: boolean;
    'classes'?: string;
    'clear'?: boolean;
    'error'?: boolean;
    'filterOptions'?: boolean;
    'helpText'?: string;
    'icon'?: string;
    'label'?: string;
    'max'?: number | undefined;
    'min'?: number | undefined;
    'multiline'?: boolean;
    'onWhenblur'?: (event: CustomEvent) => void;
    'onWhenclick'?: (event: CustomEvent) => void;
    'onWhenerror'?: (event: CustomEvent) => void;
    'onWhenfocus'?: (event: CustomEvent) => void;
    'onWheninput'?: (event: CustomEvent) => void;
    'onWhenkeydown'?: (event: CustomEvent) => void;
    'onWhenkeypress'?: (event: CustomEvent) => void;
    'onWhenkeyup'?: (event: CustomEvent) => void;
    'onWhensubmit'?: (event: CustomEvent) => void;
    'onWhenupdate'?: (event: CustomEvent) => void;
    'options'?: Array<string | number> | string | undefined;
    'required'?: boolean;
    'selfUpdate'?: boolean;
    'step'?: number | undefined;
    'type'?: string;
    'validator'?: Function | undefined;
    'value'?: string | number;
    'whenBlur'?: Function | undefined;
    'whenError'?: Function | undefined;
    'whenFocus'?: Function | undefined;
    'whenUpdate'?: Function | undefined;
  }

  interface NvMenu {
    'anchor': string | HTMLElement;
    'focusNextOption': () => Promise<void>;
    'focusOption': (index: string | number) => Promise<void>;
    'focusPreviousOption': () => Promise<void>;
    'focusedOption': number | undefined;
    'isActive': boolean;
    'optionHoverStyles': string | {};
    'optionStyles': string | {};
    'options': string | Array<string>;
    'position': string;
    'selectOption': (index: string | number) => Promise<void>;
    'whenActivated': Function;
    'whenClicked': Function;
    'whenDeactivated': Function;
    'width': string;
  }
  interface NvMenuAttributes extends StencilHTMLAttributes {
    'anchor'?: string | HTMLElement;
    'focusedOption'?: number | undefined;
    'isActive'?: boolean;
    'onWhenClosed'?: (event: CustomEvent) => void;
    'onWhenOpened'?: (event: CustomEvent) => void;
    'onWhenOptionClicked'?: (event: CustomEvent) => void;
    'optionHoverStyles'?: string | {};
    'optionStyles'?: string | {};
    'options'?: string | Array<string>;
    'position'?: string;
    'whenActivated'?: Function;
    'whenClicked'?: Function;
    'whenDeactivated'?: Function;
    'width'?: string;
  }

  interface NvProgress {
    'message': string;
    'reset': () => Promise<void>;
    'showCount': boolean;
    'speed': number;
    'start': number;
    'state': string;
    'timer': string;
    'type': string;
    'value': number;
  }
  interface NvProgressAttributes extends StencilHTMLAttributes {
    'message'?: string;
    'showCount'?: boolean;
    'speed'?: number;
    'start'?: number;
    'state'?: string;
    'timer'?: string;
    'type'?: string;
    'value'?: number;
  }

  interface NvPulse {
    'highlight': boolean;
    'startPulse': () => Promise<void>;
    'stopPulse': () => Promise<void>;
  }
  interface NvPulseAttributes extends StencilHTMLAttributes {
    'highlight'?: boolean;
  }

  interface NvRadio {
    'disabled': boolean;
    'options': Array<any> | string;
    'selfUpdate': boolean;
    'whenUpdate': Function;
  }
  interface NvRadioAttributes extends StencilHTMLAttributes {
    'disabled'?: boolean;
    'onChange'?: (event: CustomEvent) => void;
    'options'?: Array<any> | string;
    'selfUpdate'?: boolean;
    'whenUpdate'?: Function;
  }

  interface NvRipple {
    'doRipple': () => Promise<{}>;
    'highlight': boolean;
    'startRipple': () => Promise<{}>;
    'stopRipple': () => Promise<{}>;
  }
  interface NvRippleAttributes extends StencilHTMLAttributes {
    'highlight'?: boolean;
  }

  interface NvSlider {
    'disabled': boolean;
    'label': string;
    'max': number;
    'min': number;
    'selfUpdate': boolean;
    'showInput': boolean;
    'step': number | undefined;
    'value': number | undefined;
    'values': Array<number> | string | undefined;
    'whenUpdate': Function;
  }
  interface NvSliderAttributes extends StencilHTMLAttributes {
    'disabled'?: boolean;
    'label'?: string;
    'max'?: number;
    'min'?: number;
    'onChange'?: (event: CustomEvent) => void;
    'selfUpdate'?: boolean;
    'showInput'?: boolean;
    'step'?: number | undefined;
    'value'?: number | undefined;
    'values'?: Array<number> | string | undefined;
    'whenUpdate'?: Function;
  }

  interface NvSwitch {
    'disabled': boolean;
    'label': string;
    'selfUpdate': boolean;
    'toggle': () => Promise<boolean>;
    'value': boolean | string;
    'whenUpdate': Function;
  }
  interface NvSwitchAttributes extends StencilHTMLAttributes {
    'disabled'?: boolean;
    'label'?: string;
    'onChange'?: (event: CustomEvent) => void;
    'selfUpdate'?: boolean;
    'value'?: boolean | string;
    'whenUpdate'?: Function;
  }

  interface NvTabContent {}
  interface NvTabContentAttributes extends StencilHTMLAttributes {}

  interface NvTabs {
    'doOpen': (index: number, e?: Event) => Promise<boolean>;
    'initial': number;
  }
  interface NvTabsAttributes extends StencilHTMLAttributes {
    'initial'?: number;
  }

  interface NvTooltip {
    'delay': number;
    'hideAfter': number;
    'isActive': boolean;
    'offset': number;
    'paddingAmount': number;
    'position': string;
    'showBoxShadow': boolean;
    'triggerElement': HTMLElement | string;
    'triggerOn': string;
    'updateInnerHTML': (html: string) => void;
    'width': string;
  }
  interface NvTooltipAttributes extends StencilHTMLAttributes {
    'delay'?: number;
    'hideAfter'?: number;
    'isActive'?: boolean;
    'offset'?: number;
    'onWhenClosed'?: (event: CustomEvent) => void;
    'onWhenOpened'?: (event: CustomEvent) => void;
    'paddingAmount'?: number;
    'position'?: string;
    'showBoxShadow'?: boolean;
    'triggerElement'?: HTMLElement | string;
    'triggerOn'?: string;
    'width'?: string;
  }

  interface NvWave {
    'doPulse': () => void;
    'doWave': (e?: any) => Promise<{}>;
    'highlight': boolean;
    'reset': () => void;
    'startWave': (e?: any) => Promise<{}>;
    'stopWave': (e?: any) => Promise<{}>;
  }
  interface NvWaveAttributes extends StencilHTMLAttributes {
    'highlight'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'MaterialIcon': Components.MaterialIcon;
    'NvButton': Components.NvButton;
    'NvCheckboxArray': Components.NvCheckboxArray;
    'NvCheckbox': Components.NvCheckbox;
    'NvImage': Components.NvImage;
    'NvInput': Components.NvInput;
    'NvMenu': Components.NvMenu;
    'NvProgress': Components.NvProgress;
    'NvPulse': Components.NvPulse;
    'NvRadio': Components.NvRadio;
    'NvRipple': Components.NvRipple;
    'NvSlider': Components.NvSlider;
    'NvSwitch': Components.NvSwitch;
    'NvTabContent': Components.NvTabContent;
    'NvTabs': Components.NvTabs;
    'NvTooltip': Components.NvTooltip;
    'NvWave': Components.NvWave;
  }

  interface StencilIntrinsicElements {
    'material-icon': Components.MaterialIconAttributes;
    'nv-button': Components.NvButtonAttributes;
    'nv-checkbox-array': Components.NvCheckboxArrayAttributes;
    'nv-checkbox': Components.NvCheckboxAttributes;
    'nv-image': Components.NvImageAttributes;
    'nv-input': Components.NvInputAttributes;
    'nv-menu': Components.NvMenuAttributes;
    'nv-progress': Components.NvProgressAttributes;
    'nv-pulse': Components.NvPulseAttributes;
    'nv-radio': Components.NvRadioAttributes;
    'nv-ripple': Components.NvRippleAttributes;
    'nv-slider': Components.NvSliderAttributes;
    'nv-switch': Components.NvSwitchAttributes;
    'nv-tab-content': Components.NvTabContentAttributes;
    'nv-tabs': Components.NvTabsAttributes;
    'nv-tooltip': Components.NvTooltipAttributes;
    'nv-wave': Components.NvWaveAttributes;
  }


  interface HTMLMaterialIconElement extends Components.MaterialIcon, HTMLStencilElement {}
  var HTMLMaterialIconElement: {
    prototype: HTMLMaterialIconElement;
    new (): HTMLMaterialIconElement;
  };

  interface HTMLNvButtonElement extends Components.NvButton, HTMLStencilElement {}
  var HTMLNvButtonElement: {
    prototype: HTMLNvButtonElement;
    new (): HTMLNvButtonElement;
  };

  interface HTMLNvCheckboxArrayElement extends Components.NvCheckboxArray, HTMLStencilElement {}
  var HTMLNvCheckboxArrayElement: {
    prototype: HTMLNvCheckboxArrayElement;
    new (): HTMLNvCheckboxArrayElement;
  };

  interface HTMLNvCheckboxElement extends Components.NvCheckbox, HTMLStencilElement {}
  var HTMLNvCheckboxElement: {
    prototype: HTMLNvCheckboxElement;
    new (): HTMLNvCheckboxElement;
  };

  interface HTMLNvImageElement extends Components.NvImage, HTMLStencilElement {}
  var HTMLNvImageElement: {
    prototype: HTMLNvImageElement;
    new (): HTMLNvImageElement;
  };

  interface HTMLNvInputElement extends Components.NvInput, HTMLStencilElement {}
  var HTMLNvInputElement: {
    prototype: HTMLNvInputElement;
    new (): HTMLNvInputElement;
  };

  interface HTMLNvMenuElement extends Components.NvMenu, HTMLStencilElement {}
  var HTMLNvMenuElement: {
    prototype: HTMLNvMenuElement;
    new (): HTMLNvMenuElement;
  };

  interface HTMLNvProgressElement extends Components.NvProgress, HTMLStencilElement {}
  var HTMLNvProgressElement: {
    prototype: HTMLNvProgressElement;
    new (): HTMLNvProgressElement;
  };

  interface HTMLNvPulseElement extends Components.NvPulse, HTMLStencilElement {}
  var HTMLNvPulseElement: {
    prototype: HTMLNvPulseElement;
    new (): HTMLNvPulseElement;
  };

  interface HTMLNvRadioElement extends Components.NvRadio, HTMLStencilElement {}
  var HTMLNvRadioElement: {
    prototype: HTMLNvRadioElement;
    new (): HTMLNvRadioElement;
  };

  interface HTMLNvRippleElement extends Components.NvRipple, HTMLStencilElement {}
  var HTMLNvRippleElement: {
    prototype: HTMLNvRippleElement;
    new (): HTMLNvRippleElement;
  };

  interface HTMLNvSliderElement extends Components.NvSlider, HTMLStencilElement {}
  var HTMLNvSliderElement: {
    prototype: HTMLNvSliderElement;
    new (): HTMLNvSliderElement;
  };

  interface HTMLNvSwitchElement extends Components.NvSwitch, HTMLStencilElement {}
  var HTMLNvSwitchElement: {
    prototype: HTMLNvSwitchElement;
    new (): HTMLNvSwitchElement;
  };

  interface HTMLNvTabContentElement extends Components.NvTabContent, HTMLStencilElement {}
  var HTMLNvTabContentElement: {
    prototype: HTMLNvTabContentElement;
    new (): HTMLNvTabContentElement;
  };

  interface HTMLNvTabsElement extends Components.NvTabs, HTMLStencilElement {}
  var HTMLNvTabsElement: {
    prototype: HTMLNvTabsElement;
    new (): HTMLNvTabsElement;
  };

  interface HTMLNvTooltipElement extends Components.NvTooltip, HTMLStencilElement {}
  var HTMLNvTooltipElement: {
    prototype: HTMLNvTooltipElement;
    new (): HTMLNvTooltipElement;
  };

  interface HTMLNvWaveElement extends Components.NvWave, HTMLStencilElement {}
  var HTMLNvWaveElement: {
    prototype: HTMLNvWaveElement;
    new (): HTMLNvWaveElement;
  };

  interface HTMLElementTagNameMap {
    'material-icon': HTMLMaterialIconElement
    'nv-button': HTMLNvButtonElement
    'nv-checkbox-array': HTMLNvCheckboxArrayElement
    'nv-checkbox': HTMLNvCheckboxElement
    'nv-image': HTMLNvImageElement
    'nv-input': HTMLNvInputElement
    'nv-menu': HTMLNvMenuElement
    'nv-progress': HTMLNvProgressElement
    'nv-pulse': HTMLNvPulseElement
    'nv-radio': HTMLNvRadioElement
    'nv-ripple': HTMLNvRippleElement
    'nv-slider': HTMLNvSliderElement
    'nv-switch': HTMLNvSwitchElement
    'nv-tab-content': HTMLNvTabContentElement
    'nv-tabs': HTMLNvTabsElement
    'nv-tooltip': HTMLNvTooltipElement
    'nv-wave': HTMLNvWaveElement
  }

  interface ElementTagNameMap {
    'material-icon': HTMLMaterialIconElement;
    'nv-button': HTMLNvButtonElement;
    'nv-checkbox-array': HTMLNvCheckboxArrayElement;
    'nv-checkbox': HTMLNvCheckboxElement;
    'nv-image': HTMLNvImageElement;
    'nv-input': HTMLNvInputElement;
    'nv-menu': HTMLNvMenuElement;
    'nv-progress': HTMLNvProgressElement;
    'nv-pulse': HTMLNvPulseElement;
    'nv-radio': HTMLNvRadioElement;
    'nv-ripple': HTMLNvRippleElement;
    'nv-slider': HTMLNvSliderElement;
    'nv-switch': HTMLNvSwitchElement;
    'nv-tab-content': HTMLNvTabContentElement;
    'nv-tabs': HTMLNvTabsElement;
    'nv-tooltip': HTMLNvTooltipElement;
    'nv-wave': HTMLNvWaveElement;
  }


}
export declare function defineCustomElements(window: any): void;