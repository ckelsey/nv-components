import './stencil.core';
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import './stencil.core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@ionic/core';
import 'ionicons';


declare global {

  namespace StencilComponents {
    interface MaterialIcon {
      'color': string;
      'findDupes': () => void;
      'getIcon': (key: any) => any;
      'icons': () => any;
      'iconsToJson': () => void;
      'size': string;
      'type': string;
    }
  }

  interface HTMLMaterialIconElement extends StencilComponents.MaterialIcon, HTMLStencilElement {}

  var HTMLMaterialIconElement: {
    prototype: HTMLMaterialIconElement;
    new (): HTMLMaterialIconElement;
  };
  interface HTMLElementTagNameMap {
    'material-icon': HTMLMaterialIconElement;
  }
  interface ElementTagNameMap {
    'material-icon': HTMLMaterialIconElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'material-icon': JSXElements.MaterialIconAttributes;
    }
  }
  namespace JSXElements {
    export interface MaterialIconAttributes extends HTMLAttributes {
      'color'?: string;
      'size'?: string;
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NvCheckboxArray {
      'disabled': boolean;
      'label': string;
      'parentDisabled': boolean;
      'values': any[];
      'whenUpdate': Function;
    }
  }

  interface HTMLNvCheckboxArrayElement extends StencilComponents.NvCheckboxArray, HTMLStencilElement {}

  var HTMLNvCheckboxArrayElement: {
    prototype: HTMLNvCheckboxArrayElement;
    new (): HTMLNvCheckboxArrayElement;
  };
  interface HTMLElementTagNameMap {
    'nv-checkbox-array': HTMLNvCheckboxArrayElement;
  }
  interface ElementTagNameMap {
    'nv-checkbox-array': HTMLNvCheckboxArrayElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'nv-checkbox-array': JSXElements.NvCheckboxArrayAttributes;
    }
  }
  namespace JSXElements {
    export interface NvCheckboxArrayAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'label'?: string;
      'onChange'?: (event: CustomEvent) => void;
      'parentDisabled'?: boolean;
      'values'?: any[];
      'whenUpdate'?: Function;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NvCheckbox {
      'disabled': boolean;
      'label': string;
      'parentDisabled': boolean;
      'toggle': () => boolean;
      'value': boolean | string;
      'whenUpdate': Function;
    }
  }

  interface HTMLNvCheckboxElement extends StencilComponents.NvCheckbox, HTMLStencilElement {}

  var HTMLNvCheckboxElement: {
    prototype: HTMLNvCheckboxElement;
    new (): HTMLNvCheckboxElement;
  };
  interface HTMLElementTagNameMap {
    'nv-checkbox': HTMLNvCheckboxElement;
  }
  interface ElementTagNameMap {
    'nv-checkbox': HTMLNvCheckboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'nv-checkbox': JSXElements.NvCheckboxAttributes;
    }
  }
  namespace JSXElements {
    export interface NvCheckboxAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'label'?: string;
      'onChange'?: (event: CustomEvent) => void;
      'parentDisabled'?: boolean;
      'value'?: boolean | string;
      'whenUpdate'?: Function;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NvImage {
      'cover': boolean;
      'url': string;
    }
  }

  interface HTMLNvImageElement extends StencilComponents.NvImage, HTMLStencilElement {}

  var HTMLNvImageElement: {
    prototype: HTMLNvImageElement;
    new (): HTMLNvImageElement;
  };
  interface HTMLElementTagNameMap {
    'nv-image': HTMLNvImageElement;
  }
  interface ElementTagNameMap {
    'nv-image': HTMLNvImageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'nv-image': JSXElements.NvImageAttributes;
    }
  }
  namespace JSXElements {
    export interface NvImageAttributes extends HTMLAttributes {
      'cover'?: boolean;
      'url'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NvProgress {
      'message': string;
      'reset': () => void;
      'showCount': boolean;
      'speed': number;
      'start': number;
      'state': string;
      'timer': string;
      'type': string;
      'value': number;
    }
  }

  interface HTMLNvProgressElement extends StencilComponents.NvProgress, HTMLStencilElement {}

  var HTMLNvProgressElement: {
    prototype: HTMLNvProgressElement;
    new (): HTMLNvProgressElement;
  };
  interface HTMLElementTagNameMap {
    'nv-progress': HTMLNvProgressElement;
  }
  interface ElementTagNameMap {
    'nv-progress': HTMLNvProgressElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'nv-progress': JSXElements.NvProgressAttributes;
    }
  }
  namespace JSXElements {
    export interface NvProgressAttributes extends HTMLAttributes {
      'message'?: string;
      'showCount'?: boolean;
      'speed'?: number;
      'start'?: number;
      'state'?: string;
      'timer'?: string;
      'type'?: string;
      'value'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NvTabContent {

    }
  }

  interface HTMLNvTabContentElement extends StencilComponents.NvTabContent, HTMLStencilElement {}

  var HTMLNvTabContentElement: {
    prototype: HTMLNvTabContentElement;
    new (): HTMLNvTabContentElement;
  };
  interface HTMLElementTagNameMap {
    'nv-tab-content': HTMLNvTabContentElement;
  }
  interface ElementTagNameMap {
    'nv-tab-content': HTMLNvTabContentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'nv-tab-content': JSXElements.NvTabContentAttributes;
    }
  }
  namespace JSXElements {
    export interface NvTabContentAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface NvTabs {
      'initial': number;
    }
  }

  interface HTMLNvTabsElement extends StencilComponents.NvTabs, HTMLStencilElement {}

  var HTMLNvTabsElement: {
    prototype: HTMLNvTabsElement;
    new (): HTMLNvTabsElement;
  };
  interface HTMLElementTagNameMap {
    'nv-tabs': HTMLNvTabsElement;
  }
  interface ElementTagNameMap {
    'nv-tabs': HTMLNvTabsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'nv-tabs': JSXElements.NvTabsAttributes;
    }
  }
  namespace JSXElements {
    export interface NvTabsAttributes extends HTMLAttributes {
      'initial'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NvTooltip {
      'active': boolean;
      'delay': number;
      'hideAfter': number;
      'position': string;
      'triggerOn': string;
    }
  }

  interface HTMLNvTooltipElement extends StencilComponents.NvTooltip, HTMLStencilElement {}

  var HTMLNvTooltipElement: {
    prototype: HTMLNvTooltipElement;
    new (): HTMLNvTooltipElement;
  };
  interface HTMLElementTagNameMap {
    'nv-tooltip': HTMLNvTooltipElement;
  }
  interface ElementTagNameMap {
    'nv-tooltip': HTMLNvTooltipElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'nv-tooltip': JSXElements.NvTooltipAttributes;
    }
  }
  namespace JSXElements {
    export interface NvTooltipAttributes extends HTMLAttributes {
      'active'?: boolean;
      'delay'?: number;
      'hideAfter'?: number;
      'position'?: string;
      'triggerOn'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;